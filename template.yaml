# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  osf-sam

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
#IAM
  OsfPublicDBRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Public access to DynamoDBS
      Path: /
      Policies: 
        - PolicyName: root
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: '*'
                  Resource: '*'
  OsfPublicDBRoleProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref OsfPublicDBRole
  OsfCognitoSignUpRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Public access to DynamoDBS
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
     
  OsfCognitoSignUpProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref OsfCognitoSignUpRole

#COGNITO
  OsfCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: OsfCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref OsfCognitoUserPool 
      Domain: "osf"
  OsfCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref OsfCognitoUserPool
      ClientName: OsfCognitoUserPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  #APIS
  OsfOauthApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: osfOauthApi
      Description: OsfOauthApi
      StageName: v1
  OsfUsersApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: osfUsersApi
      Description: OsfUsersApi
      StageName: v1
      Auth:
          AddDefaultAuthorizerToCorsPreflight: true
          Authorizers:
              OsfCognitoAuthorizer:
                UserPoolArn: !GetAtt OsfCognitoUserPool.Arn
  OsfGoalsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: osfGoalsApi
      Description: OsfGoalsApi
      StageName: v1
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
  #LAMBDAS
  createGoal:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: lambdas/createGoal
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfPublicDBRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /goals
            Method: POST
            RestApiId:
              Ref: OsfGoalsApi
  signUp:
    Type: AWS::Serverless::Function
    Properties:
      Handler: signup.handler
      CodeUri: lambdas/oauthApi
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfCognitoSignUpRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref OsfCognitoUserPool
          CLIENT_ID: !Ref OsfCognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /oauth/signup
            Method: POST
            RestApiId:
              Ref: OsfOauthApi
  logIn:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.handler
      CodeUri: lambdas/oauthApi
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfCognitoSignUpRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref OsfCognitoUserPool
          CLIENT_ID: !Ref OsfCognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /oauth/login
            Method: POST
            RestApiId:
              Ref: OsfOauthApi
  getPublic:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: lambdas/getPublic
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfPublicDBRole.Arn
      Events:
        Goals:
          Type: Api
          Properties:
            Path: /goals
            Method: GET
            RestApiId:
              Ref: OsfGoalsApi
        Goal:
          Type: Api
          Properties:
            Path: /goals/{_id}
            Method: GET
            RestApiId:
              Ref: OsfGoalsApi
        Users:
          Type: Api
          Properties:
            Path: /users
            Method: GET
            RestApiId:
              Ref: OsfUsersApi
        User:
          Type: Api
          Properties:
            Path: /users/{_id}
            Method: GET
            RestApiId:
              Ref: OsfUsersApi
  addFriend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: lambdas/addFriend
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfPublicDBRole.Arn
      Events:
        AddFriends:
          Type: Api
          Properties:
            Path: /users/{_id}/friends
            Method: POST
            RestApiId:
              Ref: OsfUsersApi
  addEntrance:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: lambdas/addEntrance
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfPublicDBRole.Arn
      Events:
        AddFriends:
          Type: Api
          Properties:
            Path: /goals/{_id}
            Method: POST
            RestApiId:
              Ref: OsfGoalsApi
  removeFriend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: lambdas/removeFriend
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Role: !GetAtt OsfPublicDBRole.Arn
      Events:
        AddFriends:
          Type: Api
          Properties:
            Path: /users/{_id}/friends
            Method: PUT
            RestApiId:
              Ref: OsfUsersApi
  #DYNAMO
  osfUsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: osf_users
      PrimaryKey:
        Name: _id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  osfGoalsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: osf_goals
      PrimaryKey:
        Name: _id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
